// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Personal.Data;

#nullable disable

namespace Personal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241029123445_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Personal.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Imagem")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagemAux")
                        .HasColumnType("longtext");

                    b.Property<string>("Info")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("NomeAux")
                        .HasColumnType("longtext");

                    b.Property<string>("Tabela")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Um Dos Principais Problemas Associados Ao Envelhecimento Humano É A Redução Da Habilidade Para Controlar A Postura E A Marcha, Podendo Levar À Ocorrência De Quedas, Diminuindo, Assim, A Capacidade Funcional Dos Idosos.",
                            Icon = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/icons/alongamentoicone.png",
                            Imagem = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/testes/freemann.png",
                            ImagemAux = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/exercicios/alongamento.jpg",
                            Info = "[\"Sem Oscilar\",\"Em Apoio Unipodal\",\"Olhos Fechados\",\"As M\\u00E3os Para Baixo\"]",
                            Nome = "Teste de Freeman-Romberg Apoio Unipodal Com Olhos Fechados",
                            NomeAux = "Teste De Freeman-Romberg",
                            Tabela = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/tabelas/1.png",
                            Tipo = "Primeiro Teste Rápido",
                            Titulo = "Cronometrar Quanto Tempo O Indivíduo Permanece"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Para realizar o teste como descrito na versão original, o Testado é cronometrado enquanto se levanta de uma cadeira (aproximadamente 46cm), caminha em uma linha reta de 3metros de distância (em um ritmo confortável e seguro), vira, caminha de volta e senta-se sobre a cadeira novamente.",
                            Icon = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/icons/doricone.png",
                            Imagem = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/testes/tug.png",
                            ImagemAux = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/exercicios/doreslocais.jpg",
                            Info = "[\"\\u00C9 aconselhado que o individuo fa\\u00E7a o percurso para se familiarizar com o teste antes de inici\\u00E1-lo.\",\"Usar o cal\\u00E7ado habitual e apoio para caminhar (bengala, andador) se necess\\u00E1rio.\"]",
                            Nome = "Teste de tug: Timed up and Go Test",
                            NomeAux = "Teste De Tug",
                            Tabela = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/tabelas/2.png",
                            Tipo = "Segundo Teste Rápido",
                            Titulo = "Avaliação funcional: Timed Up and Go test"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Instrumentos: cadeira com braços, fita métrica, 2 cones e cronômetro. Organização do teste: cadeira em local demarcado e local para os pés tocarem o solo. Dois cones posicionados a 1,50m para trás e 1,80m para cada lado (Figura). Posição do avaliado: sentado na cadeira com os pés (calcanhares) tocando o solo. Posição do avaliador: próximo ao avaliado.",
                            Icon = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/icons/musculacaoicone.png",
                            Imagem = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/testes/equilibrio.png",
                            ImagemAux = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/exercicios/massamuscular.jpg",
                            Info = "[\"Determinar um programa de treinamento especifico de equil\\u00EDbrio para reduzir quedas.\",\"Examinar os efeitos de exerc\\u00EDcios de equil\\u00EDbrio na propriocep\\u00E7\\u00E3o de idosos.\",\"Verificar o efeito de um programa de treinamento de equil\\u00EDbrio, de curto e longo per\\u00EDodo, em idosos.\",\"Estudar a efic\\u00E1cia dos exerc\\u00EDcios de equil\\u00EDbrio, realizadas em casa.\"]",
                            Nome = "Teste de agilidade e equilíbrio dinâmico",
                            NomeAux = "Agilidade E Equilíbrio Dinâmico",
                            Tabela = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/tabelas/3.png",
                            Tipo = "Terceiro Teste Rápido",
                            Titulo = "Quais os objetivos dos testes?"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Instrumentos: cadeira com braços, fita métrica, 2 cones e cronômetro. Organização do teste: cadeira em local demarcado e local para os pés tocarem o solo. Dois cones posicionados a 1,50m para trás e 1,80m para cada lado (Figura). Posição do avaliado: sentado na cadeira com os pés (calcanhares) tocando o solo. Posição do avaliador: próximo ao avaliado.",
                            Icon = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/icons/musculacaoicone.png",
                            Imagem = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/testes/equilibrio.png",
                            ImagemAux = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/exercicios/massamuscular.jpg",
                            Info = "[\"Determinar um programa de treinamento especifico de equil\\u00EDbrio para reduzir quedas.\",\"Examinar os efeitos de exerc\\u00EDcios de equil\\u00EDbrio na propriocep\\u00E7\\u00E3o de idosos.\",\"Verificar o efeito de um programa de treinamento de equil\\u00EDbrio, de curto e longo per\\u00EDodo, em idosos.\",\"Estudar a efic\\u00E1cia dos exerc\\u00EDcios de equil\\u00EDbrio, realizadas em casa.\"]",
                            Nome = "Teste de agilidade e equilíbrio dinâmico",
                            NomeAux = "Agilidade E Equilíbrio Dinâmico",
                            Tabela = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/tabelas/3.png",
                            Tipo = "Terceiro Teste Rápido",
                            Titulo = "Quais os objetivos dos testes?"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Instrumentos: cadeira com braços, fita métrica, 2 cones e cronômetro. Organização do teste: cadeira em local demarcado e local para os pés tocarem o solo. Dois cones posicionados a 1,50m para trás e 1,80m para cada lado (Figura). Posição do avaliado: sentado na cadeira com os pés (calcanhares) tocando o solo. Posição do avaliador: próximo ao avaliado.",
                            Icon = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/icons/musculacaoicone.png",
                            Imagem = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/testes/equilibrio.png",
                            ImagemAux = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/exercicios/massamuscular.jpg",
                            Info = "[\"Determinar um programa de treinamento especifico de equil\\u00EDbrio para reduzir quedas.\",\"Examinar os efeitos de exerc\\u00EDcios de equil\\u00EDbrio na propriocep\\u00E7\\u00E3o de idosos.\",\"Verificar o efeito de um programa de treinamento de equil\\u00EDbrio, de curto e longo per\\u00EDodo, em idosos.\",\"Estudar a efic\\u00E1cia dos exerc\\u00EDcios de equil\\u00EDbrio, realizadas em casa.\"]",
                            Nome = "Teste de agilidade e equilíbrio dinâmico",
                            NomeAux = "Agilidade E Equilíbrio Dinâmico",
                            Tabela = "https://raw.githubusercontent.com/TCCJOAORAYS/IMAGENS/main/img/tabelas/3.png",
                            Tipo = "Terceiro Teste Rápido",
                            Titulo = "Quais os objetivos dos testes?"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
